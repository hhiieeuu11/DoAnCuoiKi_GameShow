// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "videochatreceiver.h"

/////////////////////////////////////////////////////////////////////////////
// CVideoChatReceiver

IMPLEMENT_DYNCREATE(CVideoChatReceiver, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CVideoChatReceiver properties

BOOL CVideoChatReceiver::GetReceiveVideoStream()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetReceiveVideoStream(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CVideoChatReceiver::GetReceiveAudioStream()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetReceiveAudioStream(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

CString CVideoChatReceiver::GetLicenseKey()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetLicenseKey(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

BOOL CVideoChatReceiver::GetEchoCanceler()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetEchoCanceler(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

long CVideoChatReceiver::GetConferenceUserID()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetConferenceUserID(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CVideoChatReceiver::GetConferenceNumber()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetConferenceNumber(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

BOOL CVideoChatReceiver::GetCaptureMode()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetCaptureMode(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CVideoChatReceiver::GetVideoWindowAutoMax()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetVideoWindowAutoMax(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

CString CVideoChatReceiver::GetCaptureOutputFolder()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetCaptureOutputFolder(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

short CVideoChatReceiver::GetCaptureFileType()
{
	short result;
	GetProperty(0x14, VT_I2, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetCaptureFileType(short propVal)
{
	SetProperty(0x14, VT_I2, propVal);
}

short CVideoChatReceiver::GetMP4FrameRate()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4FrameRate(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}

CString CVideoChatReceiver::GetMP4Album()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Album(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

long CVideoChatReceiver::GetMP4AudioSamplerate()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4AudioSamplerate(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

long CVideoChatReceiver::GetMP4Audiobitrate()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Audiobitrate(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

short CVideoChatReceiver::GetMP4Audiochannel()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Audiochannel(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

CString CVideoChatReceiver::GetMP4Author()
{
	CString result;
	GetProperty(0x1a, VT_BSTR, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Author(LPCTSTR propVal)
{
	SetProperty(0x1a, VT_BSTR, propVal);
}

CString CVideoChatReceiver::GetMP4Comment()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Comment(LPCTSTR propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}

CString CVideoChatReceiver::GetMP4Copyright()
{
	CString result;
	GetProperty(0x1c, VT_BSTR, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Copyright(LPCTSTR propVal)
{
	SetProperty(0x1c, VT_BSTR, propVal);
}

short CVideoChatReceiver::GetMP4Height()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Height(short propVal)
{
	SetProperty(0x1d, VT_I2, propVal);
}

CString CVideoChatReceiver::GetMP4Title()
{
	CString result;
	GetProperty(0x1e, VT_BSTR, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Title(LPCTSTR propVal)
{
	SetProperty(0x1e, VT_BSTR, propVal);
}

long CVideoChatReceiver::GetMP4Videobitrate()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Videobitrate(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

short CVideoChatReceiver::GetMP4Width()
{
	short result;
	GetProperty(0x20, VT_I2, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetMP4Width(short propVal)
{
	SetProperty(0x20, VT_I2, propVal);
}

short CVideoChatReceiver::GetVideoWindowAspectRatio()
{
	short result;
	GetProperty(0x22, VT_I2, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetVideoWindowAspectRatio(short propVal)
{
	SetProperty(0x22, VT_I2, propVal);
}

BOOL CVideoChatReceiver::GetUseDefaultVMR()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CVideoChatReceiver::SetUseDefaultVMR(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CVideoChatReceiver operations

void CVideoChatReceiver::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CVideoChatReceiver::Listen(LPCTSTR strIPAddress, long iPortNo)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strIPAddress, iPortNo);
	return result;
}

void CVideoChatReceiver::Disconnect()
{
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVideoChatReceiver::ReceiverVideoNoVideoImage(LPCTSTR strBmpFile)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strBmpFile);
}

CString CVideoChatReceiver::GetIPAddress()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CVideoChatReceiver::SnapShot(long iIndex, LPCTSTR strFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iIndex, strFileName);
	return result;
}

void CVideoChatReceiver::CloseOneToOneMode()
{
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVideoChatReceiver::ShowOneToOneMode(short iIndex)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iIndex);
}
